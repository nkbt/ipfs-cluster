version: "3.4"

# This is an example docker-compose file to quickly test an IPFS Cluster
# with multiple peers on a contained environment.

# It runs cluster peers (cluster0, cluster1...) attached to kubo daemons
# (ipfs0, ipfs1...) using the CRDT consensus component. Cluster peers
# autodiscover themselves using mDNS on the docker internal network.
#
# To interact with the cluster use "ipfs-cluster-ctl" (the cluster0 API port is
# exposed to the locahost. You can also "docker exec -ti cluster0 sh" and run
# it from the container. "ipfs-cluster-ctl peers ls" should show all 3 peers a few
# seconds after start.
#
# For persistence, a "compose" folder is created and used to store configurations
# and states. This can be used to edit configurations in subsequent runs. It looks
# as follows:
#
# compose/
# |-- cluster0
# |-- cluster1
# |-- ...
# |-- ipfs0
# |-- ipfs1
# |-- ...
#
# During the first start, default configurations are created for all peers.

services:
  ipfs0:
    container_name: ipfs0
    image: ipfs/kubo:release
    ports:
      #      - "4001:4001" # ipfs swarm - expose if needed/wanted
      - "5001:5001" # ipfs api - expose if needed/wanted
      - "8080:8080" # ipfs gateway - expose if needed/wanted
    volumes:
      - ./compose/ipfs0:/data/ipfs
      - ./ipfs-bootstrap.sh:/container-init.d/001-ipfs-bootstrap.sh

  cluster0:
    container_name: cluster0
    image: ipfs/ipfs-cluster:latest
    depends_on:
      - ipfs0
    environment:
      CLUSTER_PEERNAME: cluster0
      CLUSTER_SECRET: ${CLUSTER_SECRET} # From shell variable if set
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs0/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: "*" # Trust all peers in Cluster
      CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9094 # Expose API
      CLUSTER_MONITORPINGINTERVAL: 2s # Speed up peer discovery

      CLUSTER_REPLICATIONFACTORMIN: 2
      CLUSTER_REPLICATIONFACTORMAX: 2
      CLUSTER_DISABLEREPINNING: false
      CLUSTER_STATESYNCINTERVAL: "0m30s"
      CLUSTER_PINRECOVERINTERVAL: "1m0s"

    ports:
      # Open API port (allows ipfs-cluster-ctl usage on host)
      - "9094:9094"
      # The cluster swarm port would need  to be exposed if this container
      # was to connect to cluster peers on other hosts.
      # But this is just a testing cluster.
      # - "9095:9095" # Cluster IPFS Proxy endpoint
      # - "9096:9096" # Cluster swarm endpoint
    volumes:
      - ./compose/cluster0:/data/ipfs-cluster

  ipfs1:
    container_name: ipfs1
    image: ipfs/kubo:release
    volumes:
      - ./compose/ipfs1:/data/ipfs
      - ./ipfs-bootstrap.sh:/container-init.d/001-ipfs-bootstrap.sh

  cluster1:
    container_name: cluster1
    image: ipfs/ipfs-cluster:latest
    depends_on:
      - ipfs1
    environment:
      CLUSTER_PEERNAME: cluster1
      CLUSTER_SECRET: ${CLUSTER_SECRET}
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs1/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: "*"
      CLUSTER_MONITORPINGINTERVAL: 2s # Speed up peer discovery

      CLUSTER_REPLICATIONFACTORMIN: 2
      CLUSTER_REPLICATIONFACTORMAX: 2
      CLUSTER_DISABLEREPINNING: false
      CLUSTER_STATESYNCINTERVAL: "0m30s"
      CLUSTER_PINRECOVERINTERVAL: "1m0s"

    volumes:
      - ./compose/cluster1:/data/ipfs-cluster
    command:
      - "daemon --bootstrap ${CLUSTER_PEER0}" # add multiple peers with comma seperated

  ipfs2:
    container_name: ipfs2
    image: ipfs/kubo:release
    volumes:
      - ./compose/ipfs2:/data/ipfs
      - ./ipfs-bootstrap.sh:/container-init.d/001-ipfs-bootstrap.sh

  cluster2:
    container_name: cluster2
    image: ipfs/ipfs-cluster:latest
    depends_on:
      - ipfs2
    environment:
      CLUSTER_PEERNAME: cluster2
      CLUSTER_SECRET: ${CLUSTER_SECRET}
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs2/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: "*"
      CLUSTER_MONITORPINGINTERVAL: 2s # Speed up peer discovery

      CLUSTER_REPLICATIONFACTORMIN: 2
      CLUSTER_REPLICATIONFACTORMAX: 2
      CLUSTER_DISABLEREPINNING: false
      CLUSTER_STATESYNCINTERVAL: "0m30s"
      CLUSTER_PINRECOVERINTERVAL: "1m0s"

    volumes:
      - ./compose/cluster2:/data/ipfs-cluster
    command:
      - "daemon --bootstrap ${CLUSTER_PEER0}" # add multiple peers with comma seperated

  ipfs3:
    container_name: ipfs3
    image: ipfs/kubo:release
    volumes:
      - ./compose/ipfs3:/data/ipfs
      - ./ipfs-bootstrap.sh:/container-init.d/001-ipfs-bootstrap.sh

  cluster3:
    container_name: cluster3
    image: ipfs/ipfs-cluster:latest
    depends_on:
      - ipfs3
    environment:
      CLUSTER_PEERNAME: cluster3
      CLUSTER_SECRET: ${CLUSTER_SECRET}
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs3/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: "*"
      CLUSTER_MONITORPINGINTERVAL: 2s # Speed up peer discovery

      CLUSTER_REPLICATIONFACTORMIN: 2
      CLUSTER_REPLICATIONFACTORMAX: 2
      CLUSTER_DISABLEREPINNING: false
      CLUSTER_STATESYNCINTERVAL: "0m30s"
      CLUSTER_PINRECOVERINTERVAL: "1m0s"

    volumes:
      - ./compose/cluster3:/data/ipfs-cluster
    command:
      - "daemon --bootstrap ${CLUSTER_PEER0}" # add multiple peers with comma seperated

  ipfs4:
    container_name: ipfs4
    image: ipfs/kubo:release
    volumes:
      - ./compose/ipfs4:/data/ipfs
      - ./ipfs-bootstrap.sh:/container-init.d/001-ipfs-bootstrap.sh

  cluster4:
    container_name: cluster4
    image: ipfs/ipfs-cluster:latest
    depends_on:
      - ipfs4
    environment:
      CLUSTER_PEERNAME: cluster4
      CLUSTER_SECRET: ${CLUSTER_SECRET}
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs4/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: "*"
      CLUSTER_MONITORPINGINTERVAL: 2s # Speed up peer discovery

      CLUSTER_REPLICATIONFACTORMIN: 2
      CLUSTER_REPLICATIONFACTORMAX: 2
      CLUSTER_DISABLEREPINNING: false
      CLUSTER_STATESYNCINTERVAL: "0m30s"
      CLUSTER_PINRECOVERINTERVAL: "1m0s"

    volumes:
      - ./compose/cluster4:/data/ipfs-cluster
    command:
      - "daemon --bootstrap ${CLUSTER_PEER0}" # add multiple peers with comma seperated

  ipfs5:
    container_name: ipfs5
    image: ipfs/kubo:release
    volumes:
      - ./compose/ipfs5:/data/ipfs
      - ./ipfs-bootstrap.sh:/container-init.d/001-ipfs-bootstrap.sh

  cluster5:
    container_name: cluster5
    image: ipfs/ipfs-cluster:latest
    depends_on:
      - ipfs5
    environment:
      CLUSTER_PEERNAME: cluster5
      CLUSTER_SECRET: ${CLUSTER_SECRET}
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs5/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: "*"
      CLUSTER_MONITORPINGINTERVAL: 2s # Speed up peer discovery

      CLUSTER_REPLICATIONFACTORMIN: 2
      CLUSTER_REPLICATIONFACTORMAX: 2
      CLUSTER_DISABLEREPINNING: false
      CLUSTER_STATESYNCINTERVAL: "0m30s"
      CLUSTER_PINRECOVERINTERVAL: "1m0s"

  ipfs6:
    container_name: ipfs6
    image: ipfs/kubo:release
    volumes:
      - ./compose/ipfs6:/data/ipfs
      - ./ipfs-bootstrap.sh:/container-init.d/001-ipfs-bootstrap.sh

  cluster6:
    container_name: cluster6
    image: ipfs/ipfs-cluster:latest
    depends_on:
      - ipfs6
      # only for initial bootstrap:
      - cluster1
      - cluster2
    environment:
      CLUSTER_PEERNAME: cluster6
      CLUSTER_SECRET: ${CLUSTER_SECRET} # From shell variable if set
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs6/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: "*" # Trust all peers in Cluster
      CLUSTER_MONITORPINGINTERVAL: 2s # Speed up peer discovery

      CLUSTER_REPLICATIONFACTORMIN: 2
      CLUSTER_REPLICATIONFACTORMAX: 2
      CLUSTER_DISABLEREPINNING: false
      CLUSTER_STATESYNCINTERVAL: "0m30s"
      CLUSTER_PINRECOVERINTERVAL: "1m0s"

    volumes:
      - ./compose/cluster6:/data/ipfs-cluster
    command:
      - "daemon --bootstrap ${CLUSTER_PEER1},${CLUSTER_PEER2}" # add multiple peers with comma seperated
      # - "daemon" # after first inbitial bootstrap peerstore will be populated and we no longer need bootstrapping
